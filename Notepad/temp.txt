import asyncio
import subprocess
import time
import os
import signal
from datetime import datetime
from mavsdk import System
from mavsdk.mission import MissionItem, MissionPlan

# --- Configuration ---
# MAVProxy가 드론에 연결할 주소 설정 (실제 환경에 맞게 수정 필요)
# 예: 시리얼 포트
DRONE_CONNECTION_STRING = "/dev/ttyACM0"
DRONE_BAUDRATE = "57600"
# 예: SITL UDP (PX4 SITL 기본 포트는 14550 또는 14540)
# DRONE_CONNECTION_STRING = "udp:127.0.0.1:14550"
# DRONE_BAUDRATE = None # UDP 사용 시 불필요

# MAVProxy가 MAVSDK와 통신하기 위해 열어둘 로컬 UDP 포트
MAVPROXY_FORWARDING_PORT = 14550
MAVSDK_CONNECTION_ADDRESS = f"udp://:{MAVPROXY_FORWARDING_PORT}" # MAVSDK는 이 포트로 연결

# --- Global Variables ---
mavproxy_process = None # MAVProxy 프로세스 객체를 저장할 변수

async def start_mavproxy(tlog_filename):
    """MAVProxy를 별도 프로세스로 시작하고 로깅을 시작합니다."""
    global mavproxy_process
    print(f"MAVProxy 시작 중... 로그 파일: {tlog_filename}")

    # MAVProxy 실행 명령어 리스트 구성
    command = [
        "mavproxy.py",
        f"--master={DRONE_CONNECTION_STRING}",
        # MAVSDK가 연결할 수 있도록 로컬 UDP 포트로 데이터 포워딩
        f"--out=udp:127.0.0.1:{MAVPROXY_FORWARDING_PORT}",
        # 로그 파일 지정
        f"--logfile={tlog_filename}",
        # "--daemon" # MAVProxy 콘솔 출력을 보지 않으려면 이 옵션 사용 (백그라운드 실행)
    ]

    # 시리얼 연결 시 보드레이트 추가
    if DRONE_BAUDRATE and DRONE_CONNECTION_STRING.startswith("/dev/"):
        command.insert(2, f"--baudrate={DRONE_BAUDRATE}")

    try:
        # MAVProxy 프로세스 시작
        # 콘솔 출력을 숨기려면 stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL 추가
        mavproxy_process = subprocess.Popen(command)
        print(f"MAVProxy 프로세스 시작됨 (PID: {mavproxy_process.pid}). 초기화 대기 중...")

        # MAVProxy가 포트를 열고 준비될 시간을 줍니다 (필요에 따라 시간 조절)
        await asyncio.sleep(5)
        # 간단한 확인: 프로세스가 여전히 실행 중인지 체크
        if mavproxy_process.poll() is None:
             print("MAVProxy 준비 완료.")
             return True
        else:
             print(f"MAVProxy가 시작 직후 종료되었습니다. 반환 코드: {mavproxy_process.poll()}")
             return False

    except FileNotFoundError:
        print("오류: 'mavproxy.py' 명령을 찾을 수 없습니다. MAVProxy가 설치되어 있고 PATH에 있는지 확인하세요.")
        mavproxy_process = None
        return False
    except Exception as e:
        print(f"MAVProxy 시작 중 오류 발생: {e}")
        mavproxy_process = None
        return False

def stop_mavproxy():
    """실행 중인 MAVProxy 프로세스를 종료합니다."""
    global mavproxy_process
    if mavproxy_process and mavproxy_process.poll() is None: # 프로세스가 존재하고 실행 중인지 확인
        print("MAVProxy 프로세스 종료 중...")
        try:
            # SIGTERM 신호를 보내 정상 종료 시도 (파일 핸들 닫기 등)
            mavproxy_process.terminate()
            # 프로세스가 종료될 때까지 최대 5초 대기
            mavproxy_process.wait(timeout=5)
            print("MAVProxy 종료됨.")
        except subprocess.TimeoutExpired:
            # 정상 종료 실패 시 강제 종료 (SIGKILL)
            print("MAVProxy가 정상적으로 종료되지 않았습니다. 강제 종료(SIGKILL) 시도 중...")
            mavproxy_process.kill()
            mavproxy_process.wait() # 강제 종료 확인
            print("MAVProxy 강제 종료됨.")
        except Exception as e:
            print(f"MAVProxy 종료 중 오류 발생: {e}")
        finally:
            mavproxy_process = None # 프로세스 변수 초기화
    elif mavproxy_process:
        print("MAVProxy 프로세스가 이미 종료되었습니다.")
        mavproxy_process = None
    else:
        print("MAVProxy 프로세스가 시작되지 않았거나 이미 종료되었습니다.")

async def setup_and_connect_drone():
    """MAVSDK 시스템 객체를 생성하고 MAVProxy를 통해 드론에 연결합니다."""
    drone = System()
    print(f"MAVSDK를 MAVProxy 포트({MAVSDK_CONNECTION_ADDRESS})에 연결 시도 중...")
    await drone.connect(system_address=MAVSDK_CONNECTION_ADDRESS)

    print("드론 연결 대기 중...")
    async for state in drone.core.connection_state():
        if state.is_connected:
            print("MAVSDK를 통해 드론 연결됨!")
            return drone # 연결 성공 시 drone 객체 반환
    # 연결 실패 시 (async for 루프가 끝나면)
    print("MAVSDK 드론 연결 실패.")
    return None

async def run_example_mission(drone):
    """예제 미션을 업로드하고 실행한 후 완료될 때까지 모니터링합니다."""
    print("예제 미션 생성 중...")
    mission_items = []
    # 이륙 고도 10미터
    mission_items.append(MissionItem(latitude_deg=float('nan'), # 이륙 시 위경도 불필요
                                     longitude_deg=float('nan'),
                                     relative_altitude_m=10,
                                     speed_m_s=float('nan'), # 이륙 시 속도 불필요
                                     is_fly_through=False, # 이륙 지점에서 멈춤
                                     gimbal_pitch_deg=float('nan'),
                                     gimbal_yaw_deg=float('nan'),
                                     camera_action=MissionItem.CameraAction.NONE,
                                     loiter_time_s=float('nan'),
                                     camera_photo_interval_s=float('nan'),
                                     acceptance_radius_m=float('nan'),
                                     yaw_deg=float('nan'),
                                     camera_photo_distance_m=float('nan'),
                                     command=22)) # MAV_CMD_NAV_TAKEOFF

    # 첫 번째 웨이포인트 (예: 홈 위치 기준 북쪽으로 20미터, 고도 10미터)
    # 실제 미션에서는 정확한 좌표를 사용해야 합니다.
    print("홈 위치 확인 중...")
    home_lat, home_lon = None, None
    async for home in drone.telemetry.home():
        if home.latitude_deg != 0 and home.longitude_deg != 0: # 유효한 홈 위치 확인
            home_lat = home.latitude_deg
            home_lon = home.longitude_deg
            print(f"홈 위치 확인: {home_lat}, {home_lon}")
            break
        await asyncio.sleep(1)

    if home_lat is None:
        print("홈 위치를 얻을 수 없습니다. 임의 좌표 사용.")
        # 임의의 좌표 또는 기본값 사용 (실제 사용 시 주의)
        home_lat, home_lon = 47.3977417, 8.5455936 # PX4 SITL 기본 위치 예시

    # 예시: 홈 위치에서 북쪽으로 약 20미터 이동 (위도 근사치 증가)
    wp1_lat = home_lat + 0.00018
    wp1_lon = home_lon

    mission_items.append(MissionItem(latitude_deg=wp1_lat,
                                     longitude_deg=wp1_lon,
                                     relative_altitude_m=10,
                                     speed_m_s=5, # 5 m/s 속도
                                     is_fly_through=True, # 웨이포인트를 통과하여 다음으로 이동
                                     gimbal_pitch_deg=float('nan'),
                                     gimbal_yaw_deg=float('nan'),
                                     camera_action=MissionItem.CameraAction.NONE,
                                     loiter_time_s=float('nan'),
                                     camera_photo_interval_s=float('nan'),
                                     acceptance_radius_m=float('nan'), # 기본값 사용
                                     yaw_deg=float('nan'), # 기본값 사용 (경로 방향)
                                     camera_photo_distance_m=float('nan'),
                                     command=16)) # MAV_CMD_NAV_WAYPOINT

    # 미션 종료 후 자동 복귀 (RTL - Return to Launch)
    mission_items.append(MissionItem(latitude_deg=float('nan'), # RTL 시 좌표/고도 불필요
                                     longitude_deg=float('nan'),
                                     relative_altitude_m=float('nan'),
                                     speed_m_s=float('nan'),
                                     is_fly_through=False,
                                     gimbal_pitch_deg=float('nan'),
                                     gimbal_yaw_deg=float('nan'),
                                     camera_action=MissionItem.CameraAction.NONE,
                                     loiter_time_s=float('nan'),
                                     camera_photo_interval_s=float('nan'),
                                     acceptance_radius_m=float('nan'),
                                     yaw_deg=float('nan'),
                                     camera_photo_distance_m=float('nan'),
                                     command=20)) # MAV_CMD_NAV_RETURN_TO_LAUNCH

    mission_plan = MissionPlan(mission_items)

    print("미션 업로드 중...")
    await drone.mission.upload_mission(mission_plan)
    print("미션 업로드 완료.")

    print("드론 시동(Arm) 중...")
    await drone.action.arm()
    print("드론 시동 완료.")

    print("미션 시작!")
    await drone.mission.start_mission()

    # 미션 완료 모니터링
    async for mission_finished in drone.mission.is_mission_finished():
        if mission_finished:
            print("MAVSDK: 미션 완료 감지!")
            break # 완료되면 루프 종료
        # 진행 상황을 보고 싶다면 mission_progress 사용
        # async for progress in drone.mission.mission_progress():
        #    print(f"미션 진행: {progress.current}/{progress.total}")
        await asyncio.sleep(1) # 1초마다 확인

    print("미션 실행 완료됨.")
    # 착륙 및 로그 기록 완료를 위해 잠시 대기 (선택 사항)
    print("로그 기록 마무리를 위해 5초 대기...")
    await asyncio.sleep(5)

async def main():
    """메인 실행 로직: MAVProxy 시작, MAVSDK 연결, 미션 실행, MAVProxy 종료."""
    # 동적 TLOG 파일 이름 생성
    tlog_filename = f"mission_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.tlog"
    drone = None # drone 객체 초기화

    # try...finally 구문을 사용하여 어떤 상황에서도 MAVProxy가 종료되도록 보장
    try:
        # 1. MAVProxy 시작
        if not await start_mavproxy(tlog_filename):
            print("MAVProxy 시작 실패. 스크립트를 종료합니다.")
            return # MAVProxy 시작 실패 시 종료

        # 2. MAVSDK 연결
        drone = await setup_and_connect_drone()
        if drone is None:
            print("드론 연결 실패. 스크립트를 종료합니다.")
            # MAVProxy를 여기서 종료해야 함
            stop_mavproxy()
            return

        # 3. 미션 실행
        await run_example_mission(drone)

        print("모든 작업 완료.")

    except Exception as e:
        print(f"스크립트 실행 중 예외 발생: {e}")
    finally:
        # 4. MAVProxy 종료 (스크립트 정상 종료 또는 예외 발생 시 모두 실행됨)
        print("스크립트 종료 절차 시작. MAVProxy 종료 중...")
        stop_mavproxy()
        print(f"TLOG 파일 '{tlog_filename}' 이(가) 저장되었습니다 (MAVProxy가 정상적으로 종료된 경우).")

def signal_handler(sig, frame):
    """Ctrl+C와 같은 인터럽트 신호 처리기"""
    print("\n인터럽트 신호 감지 (Ctrl+C)! 종료 절차 시작...")
    # 실행 중인 asyncio 루프를 중지 시도
    loop = asyncio.get_event_loop()
    # 모든 실행 중인 태스크를 가져와서 취소할 수도 있습니다 (더 복잡).
    # 여기서는 MAVProxy를 먼저 종료하고 루프를 멈추는 것을 시도합니다.
    stop_mavproxy()
    loop.stop()
    print("MAVProxy 종료 시도 완료. 스크립트 종료 중...")

if __name__ == "__main__":
    # 인터럽트 신호(SIGINT: Ctrl+C, SIGTERM: kill 등) 처리기 등록
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # asyncio 이벤트 루프 실행
    asyncio.run(main())
    print("스크립트 실행 완료.")